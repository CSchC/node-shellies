#!/usr/bin/env node
/* eslint-disable no-console */

const colors = require('colors/safe')
const commandLineCommands = require('command-line-commands')

const packageVersion = require('../package.json').version
const shellies = require('../index')

const listen = () => {
  shellies
    .on('discover', device => {
      console.log(
        colors.green('[Discovered device]'),
        colors.gray('Type:'), device.type,
        colors.gray('ID:'), device.id,
        colors.gray('Host:'), device.host
      )

      device
        .on('change', (prop, newValue) => {
          console.log(
            colors.green('[Property changed]'),
            colors.gray('Name:'), prop,
            colors.gray('Value:'), newValue,
            colors.gray('Device ID:'), device.id
          )
        })
        .on('offline', () => {
          console.log(
            colors.red('[Device offline]'),
            colors.gray('ID:'), device.id
          )
        })
        .on('online', () => {
          console.log(
            colors.green('[Device online]'),
            colors.gray('ID:'), device.id
          )
        })
    })
    .on('unknown', (type, id, host) => {
      console.log(
        colors.yellow('[Unknown device]'),
        colors.gray('Type:'), type,
        colors.gray('ID:'), id,
        colors.gray('Host:'), host
      )
    })
    .on('stale', device => {
      console.log(
        colors.red('[Stale device]'),
        colors.gray('ID:'), device.id
      )
    })
    .start()
}

const commands = new Map()
commands.set('listen', listen)

try {
  const { command, argv } = commandLineCommands(
    Array.from(commands.keys())
  )

  commands.get(command).apply(this, argv)
} catch (e) {
  if (e.name === 'INVALID_COMMAND') {
    console.log('node-shellies', packageVersion)
    console.log('')
    console.log('Valid commands:', Array.from(commands.keys()).join(', '))
  } else {
    console.error(e)
    process.exit(1)
  }
}
